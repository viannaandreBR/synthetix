require('dotenv').config();

const { wrap } = require('../../..');
const fs = require('fs');
const path = require('path');
const program = require('commander');
const ethers = require('ethers');
const inquirer = require('inquirer');
const { cyan, gray, green, yellow, red } = require('chalk');
const { getContract } = require('../utils/getContract');
const { setupProvider } = require('../utils/setupProvider');

async function importIssuerData({
	network,
	providerUrl,
	dataFile,
	deploymentPath,
	gasPrice,
	gasLimit,
	yes,
	batchSize,
	dryRun,
}) {
	// Validate input parameters
	if (!network) throw new Error('Please specify a network');
	if (!providerUrl) throw new Error('Please specify a provider');
	if (!dataFile) throw new Error('Please specify a JSON input file');
	if (!fs.existsSync(dataFile)) throw new Error(`No file at ${dataFile}`);

	// Parse data
	const data = JSON.parse(fs.readFileSync(dataFile));

	// Evaluate deployment path
	const { getPathToNetwork } = wrap({
		network,
		useOvm: true,
		fs,
		path,
	});
	if (!deploymentPath) {
		deploymentPath = getPathToNetwork({ network, useOvm: true });
	}

	// Prepare contracts and signer
	const privateKey = process.env.PRIVATE_KEY;
	const { wallet } = setupProvider({ providerUrl, privateKey });
	const SynthetixState = getContract({
		contract: 'SynthetixState',
		source: 'SynthetixStateWithLimitedSetup',
		wallet,
		network,
		useOvm: true,
	});

	// Print data and confirm before continuing
	console.log('');
	console.log(cyan('Please review this information before continuing:'));
	console.log(
		gray('================================================================================')
	);
	console.log(yellow('* network:', network));
	console.log(yellow('* provider:', providerUrl));
	console.log(yellow('* gas price:', gasPrice));
	console.log(yellow('* gas limit:', gasLimit));
	console.log(yellow('* deployment path:', deploymentPath));
	console.log(yellow('* batch size:', batchSize));
	console.log(yellow('* Signer:', wallet.address));
	console.log(yellow('* DRY RUN:', dryRun));
	console.log(
		gray('================================================================================')
	);
	console.log('\n');
	async function confirm() {
		if (yes) return;

		const { confirmation } = await inquirer.prompt([
			{
				type: 'confirm',
				name: 'confirmation',
				message: 'Continue?',
			},
		]);
		if (!confirmation) {
			console.log(gray('User cancelled'));
			process.exit(0);
		}
	}
	await confirm();

	// Sort data
	const issuers = Object.keys(data.issuers).sort((a, b) =>
		+data.issuers[a] < +data.issuers[b] ? 1 : -1
	);

	// Sweep all accounts
	console.log(
		gray(`> Importing issuer data for ${issuers.length} accounts in batches of ${batchSize}`)
	);
	for (let i = 0; i < issuers.length; i += batchSize) {
		console.log(gray(`  > Processing accounts ${i} to ${i + batchSize - 1}`));

		const accounts = issuers.slice(i, i + batchSize);
		const sUSDAmounts = accounts.map(account => data.issuers[account]);

		console.log(
			gray(
				`  > SynthetixState.importIssuerData(\n[${accounts.join(',')}], \n[${sUSDAmounts.join(
					','
				)}])`
			)
		);

		if (!dryRun) {
			const tx = await SynthetixState.importIssuerData(accounts, sUSDAmounts);
			console.log(gray('  > tx', JSON.stringify(tx, null, 2)));

			const receipt = await tx.wait();
			console.log(gray('  > receipt', JSON.stringify(receipt, null, 2)));
		}
	}

	console.log(green(`> DONE!`));
}

program
	.description('Imports issuer data in batches')
	.option('--network <value>', 'Network to use', 'kovan')
	.option(
		'--provider-url <value>',
		'The http provider to use for communicating with the blockchain'
	)
	.option('--deployment-path <value>', 'Specify the path to the deployment data directory')
	.option(
		'--data-file <value>',
		'The json file where target accounts are stored (generated by calculate-l2-trial-scores.js)'
	)
	.option('--gas-price <value>', 'Gas price to set when performing txs', '0')
	.option('--gas-limit <value>', 'Gas limit to set when performing txs', 8999999)
	.option('--batch-size <value>', 'Batch size to import data with', 100)
	.option('--yes', 'Skip all confirmations', false)
	.option('--dry-run', 'Avoids sending any transaction', false)
	.action(async (...args) => {
		try {
			await importIssuerData(...args);
		} catch (err) {
			console.error(red(err));
			console.log(err.stack);

			process.exitCode = 1;
		}
	});

program.parse(process.argv);
